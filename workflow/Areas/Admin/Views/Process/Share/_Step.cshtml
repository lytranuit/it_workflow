
<template id="template_step">
    <div class="col-lg-12 mt-2 step-container">
        <b class="col-form-label">Các bước thực hiện:</b>
        <div class="pt-1">
            <div class="list-group-step">
                <div class="m-b-10 m-l-10 connect-step">
                    <div class="list-group-step-item" id="list">
                        <div v-for="(item,index) in scene.blocks" :key="index" class="item-step-data step-not-parallel" :class="{ 'active-step': item.selected == true }">
                            <div class="before" v-show="index == 0"></div>
                            <div class="after" v-show="index == (scene.blocks.length - 1)"></div>
                            <div class="d-flex align-items-center justify-content-center" style="min-height: 60px; position: relative;">
                                <div class="h-100 d-flex justify-content-center connect-step-item" style="width:40px;">
                                    <div class="order-process">{{index + 1}}</div>
                                </div>
                                <div class="input-custom">
                                    <div class="input">
                                        <div class="flex items-center">
                                            <div class="ms-input flex items-center w-100">
                                                <input maxlength="255" placeholder="Nhập tên bước" class="form-control step_name" required v-model="item.title" v-on:focus="active_step(item,index)" :name="'list_name_'+index">
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</template>
<script>

    var template_step = $("#template_step").html();
    Vue.component('step', {
         template:template_step,
         //props: {
         //    scene: {
         //        type: Object,
         //        default: ()=>{}
         //    }
         //},
         beforeCreate(){
             //console.log(this.$options.propsData);
             //if(!this.$options.propsData.item.time){
             //    this.$options.propsData.item.time = {};
             //}
         },
         computed:{
             scene(){
                 return store.state.scene;
             }
         },
         mounted() {
         },
         beforeDestroy(){
         },
         methods:{
             active_step: function (item,index) {
                //var scene = this.scene;
                //scene.blocks = scene.blocks.map(function(item){
                //    item.selected = false;
                //    return item;
                //})
                //scene.blocks[index].selected = true
                //store.commit("SET_SCENE",scene);
                 store.dispatch("active_step",index);
                this.$emit("select",item);
             },
         },
         //watch:{
         //    scene:{
         //       handler(newValue, oldValue) {
         //           console.log(1);
         //       },
         //       deep:true,

         //    }
         //}
     })
</script>