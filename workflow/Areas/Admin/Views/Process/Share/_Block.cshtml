
<template id="vue_block">
    <div class="vue-block" :class="{selected: selected}" :style="style">
        <header :style="headerStyle">
            {{title}}
            <a class="delete" v-on:click="deleteBlock" v-show="name != 'start'">x</a>
        </header>
        <div class="inputs">
            <div class="input" v-for="(slot, index) in inputs">
                <div class="circle inputSlot" :class="{active: slot.active}"
                     v-on:mouseup="slotMouseUp($event, index)"
                     v-on:mousedown="slotBreak($event, index)"></div>
                {{slot.label}}
            </div>
        </div>
        <div class="outputs">
            <div class="output" v-for="(slot, index) in outputs">
                <div class="circle" :class="{active: slot.active}"
                     v-on:mousedown="slotMouseDown($event, index)"></div>
                {{slot.label}}
            </div>
        </div>
    </div>
</template>
<script>
    var template_vue_block = $("#vue_block").html();

    Vue.component('VueBlock', {
        template:template_vue_block,
        props: {
          x: {
            type: Number,
            default: 0,
            validator: function (val) {
              return typeof val === 'number'
            }
          },
          y: {
            type: Number,
            default: 0,
            validator: function (val) {
              return typeof val === 'number'
            }
          },
          selected: Boolean,
          title: {
            type: String,
            default: 'Title'
          },
          name: {
            type: String,
            default: ''
          },
          inputs: Array,
          outputs: Array,

          options: {
            type: Object
          }
        },
        created () {
          this.mouseX = 0
          this.mouseY = 0

          this.lastMouseX = 0
          this.lastMouseY = 0

          this.linking = false
          this.dragging = false
        },
        mounted () {
          document.documentElement.addEventListener('mousemove', this.handleMove, true)
          document.documentElement.addEventListener('mousedown', this.handleDown, true)
          document.documentElement.addEventListener('mouseup', this.handleUp, true)
        },
        beforeDestroy () {
          document.documentElement.removeEventListener('mousemove', this.handleMove, true)
          document.documentElement.removeEventListener('mousedown', this.handleDown, true)
          document.documentElement.removeEventListener('mouseup', this.handleUp, true)
        },
        data () {
          return {
            width: this.options.width,
            hasDragged: false
          }
        },
        methods: {
          handleMove (e) {
            this.mouseX = e.pageX || e.clientX + document.documentElement.scrollLeft
            this.mouseY = e.pageY || e.clientY + document.documentElement.scrollTop

            if (this.dragging && !this.linking) {
              let diffX = this.mouseX - this.lastMouseX
              let diffY = this.mouseY - this.lastMouseY

              this.lastMouseX = this.mouseX
              this.lastMouseY = this.mouseY

              this.moveWithDiff(diffX, diffY)

              this.hasDragged = true
            }
          },
          handleDown (e) {
            this.mouseX = e.pageX || e.clientX + document.documentElement.scrollLeft
            this.mouseY = e.pageY || e.clientY + document.documentElement.scrollTop

            this.lastMouseX = this.mouseX
            this.lastMouseY = this.mouseY

            const target = e.target || e.srcElement
            if (this.$el.contains(target) && e.which === 1) {
              this.dragging = true

              this.$emit('select')

              if (e.preventDefault) e.preventDefault()
            }
          },
          handleUp () {
            if (this.dragging) {
              this.dragging = false

              if (this.hasDragged) {
                this.save()
                this.hasDragged = false
              }
            }

            if (this.linking) {
              this.linking = false
            }
          },
          // Slots
          slotMouseDown (e, index) {
            this.linking = true

            this.$emit('linkingstart', index)
            if (e.preventDefault) e.preventDefault()
          },
          slotMouseUp (e, index) {
            this.$emit('linkingstop', index)
            if (e.preventDefault) e.preventDefault()
          },
          slotBreak (e, index) {
            this.linking = true

            this.$emit('linkingbreak', index)
            if (e.preventDefault) e.preventDefault()
          },
          save () {
            this.$emit('update')
          },
          deleteBlock () {
            this.$emit('delete')
          },
          moveWithDiff (diffX, diffY) {
            let left = this.x + diffX / this.options.scale
            let top = this.y + diffY / this.options.scale

            this.$emit('update:x', left)
            this.$emit('update:y', top)
          }
        },
        computed: {
          style () {
            return {
              top: this.options.center.y + this.y * this.options.scale + 'px',
              left: this.options.center.x + this.x * this.options.scale + 'px',
              width: this.width + 'px',
              transform: 'scale(' + (this.options.scale + '') + ')',
              transformOrigin: 'top left'
            }
          },
          headerStyle () {
            return {
              height: this.options.titleHeight + 'px'
            }
          }
        }
    });
</script>