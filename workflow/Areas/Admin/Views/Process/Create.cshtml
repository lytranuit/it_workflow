@using workflow
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@addTagHelper *, workflow
@{
    ViewData["Title"] = "Create";
    Layout = "~/Views/Shared/_Admin.cshtml";
}
<form method="POST" id="app" autocomplete="on" class="row">
    <div class="col-12">
        <div class="d-inline-block w-100">
            <span class="page-title">Tạo quy trình</span>
            <button class="btn btn-primary btn-sm float-right" type="submit"><span class="px-4">Lưu</span></button>
        </div>
    </div>
    <div class="col-12 pt-4">
        <div class="row">
            <div class="col-md-3">
                <section class="card card-fluid">
                    <div class="card-body">
                        <div class="form-group row">
                            <div class="col-lg-12 mt-2">
                                <b class="col-form-label">Mã quy trình:<span class="text-danger">*</span></b>
                                <div class="pt-1">
                                    <input class="form-control form-control-sm" type='text' name="code" required="" v-model="code" />
                                </div>
                            </div>
                            <div class="col-lg-12 mt-2">
                                <b class="col-form-label">Tên quy trình:<span class="text-danger">*</span></b>
                                <div class="pt-1">
                                    <input class="form-control form-control-sm" type='text' name="name" required="" v-model="name" />
                                </div>
                            </div>
                            <div class="col-lg-12 mt-2">
                                <b class="col-form-label">Nhóm quy trình:<span class="text-danger">*</span></b>
                                <div class="pt-1">
                                    <group></group>
                                </div>
                            </div>
                            <div class="col-lg-12 mt-2 step-container">
                                <b class="col-form-label">Các bước thực hiện:<span class="text-danger">*</span></b>
                                <div class="pt-1">
                                    <div class="list-group-step">
                                        <div class="m-b-10 m-l-10 connect-step">
                                            <div class="list-group-step-item" id="list">
                                                <template v-for="(item,index) in list">
                                                    <div class="item-step-data step-not-parallel" :class="{ 'active-step': active == index }" v-if="!item.group">
                                                        <div class="before" v-show="index == 0"></div>
                                                        <div class="after" v-show="index == (list.length - 1)"></div>
                                                        <div class="d-flex align-items-center justify-content-center" style="min-height: 60px; position: relative;">
                                                            <div class="h-100 d-flex justify-content-center connect-step-item" style="width:40px;">
                                                                <div class="order-process">{{index + 1}}</div>
                                                            </div>
                                                            <div class="input-custom">
                                                                <div class="input">
                                                                    <div class="flex items-center">
                                                                        <div class="ms-input flex items-center w-100">
                                                                            <input maxlength="255" placeholder="Nhập tên bước" class="form-control step_name" required v-model="item.name" v-on:focus="active_step(item,index)">
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            <div class="icon-add-step">
                                                                <div class="container-icon">
                                                                    <div class="tooltip-container"
                                                                         v-show="index != 0">
                                                                        <div class="con-ms-tooltip remove_step" data-toggle="tooltip" data-placement="top" data-original-title="Xóa bước" v-on:click="remove_step(index)">
                                                                            <i class="fas fa-minus-circle"></i>
                                                                        </div>
                                                                    </div><div class="tooltip-container">
                                                                        <div class="con-ms-tooltip add_step" data-toggle="tooltip" data-placement="top" data-original-title="Thêm bước" v-on:click="add_step(index)">
                                                                            <i class="fas fa-plus-circle"></i>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>

                                                    <div class="list-parallel-step-item" v-else-if="!item.is_parallel">
                                                        <template v-for="(item1,index1) in get_group(item.group)">
                                                            <step :item="item1"></step>
                                                        </template>
                                                    </div>
                                                </template>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-12 mt-2">
                                <b class="col-form-label">Ghi chú:</b>
                                <div class="pt-1">
                                    <textarea id="description" class="form-control form-control-sm" v-model="description"></textarea>
                                </div>
                            </div>
                        </div>
                    </div>
                </section>
            </div>
            <div class="col-md-9" id="detail">
                <detail :item="step" :index="active"></detail>
            </div>
        </div>
    </div>
</form>
<template id="template_step">
    <div class="item-step-data">
    </div>
</template>

<template id="template_detail">
    <div class="row popup-setting-process-form">
        <div class="col-md-9">
            <section class="card card-fluid">
                <div class="card-header">
                    <div class="header-top">
                        <div class="current-step">{{item.name}}</div><!---->
                        <div class="create-by flex-m" v-show="index == 0"><span>ID:&nbsp;</span><div class="line-hozi"></div><span>Người tạo:&nbsp;</span><div class="line-hozi"></div><span>Ngày tạo:&nbsp;</span></div>
                        <div class="py-2 flex-m" v-show="index != 0">
                            <span>Người thực hiện:&nbsp;</span><div class="line-hozi"></div><span>Thời hạn:&nbsp;</span>
                            <div style="margin-left: auto;">
                                <div class="custom-control custom-switch switch-primary d-inline-block mr-3">
                                    <input type="checkbox" class="custom-control-input" id="is_parallel" v-model="item.is_parallel">
                                    <label class="custom-control-label" for="is_parallel">Bước song song</label>
                                </div>
                                <div class="custom-control custom-switch switch-primary d-inline-block">
                                    <input type="checkbox" class="custom-control-input" id="is_approve" v-model="item.is_approve">
                                    <label class="custom-control-label" for="is_approve">Bước duyệt</label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="form-group row">
                    </div>
                </div>
            </section>
        </div>
        <div class="col-md-3">
            <section class="card card-fluid">
                <div class="card-body">
                    <div class="form-group row">
                    </div>
                </div>
            </section>
        </div>
    </div>
</template>
@section Scripts {
    @{
    await Html.RenderPartialAsync("_ValidationScriptsPartial");
}
<environment names="Development">
    <!-- bản phát triển (development), bao gồm những cảnh báo hữu ích trong console -->
    <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
</environment>
<environment names="Staging,Production">
    <!-- bản production, được tối ưu về dung lượng và tốc độ -->
    <script src="https://cdn.jsdelivr.net/npm/vue"></script>
</environment>
<script>
    var template_detail = $("#template_detail").html();
    var template_step = $("#template_step").html();
    Vue.component('detail', {
        template:template_detail,
        props: {
            item: {
                type: Object,
                default: ()=>{}
            },
            index:""
        },
    })
    Vue.component('step', {
        template:template_step,
        props: {
            item: {
                type: Object,
                default: ()=>{}
            },
            index:""
        },
    })
    var app = new Vue({
         el: '#app',
         data: {
             "code": "",
             "name": "",
             "group_id": "2",
             "description": "",
             "list": [{
                 "name":"",
                 "is_approve":true,
                 "is_parallel":false,
                 "id": "add_100",
             },{
                 "name":"",
                 "id": "add_200",
                 "is_approve":true,
                 "is_parallel":false,
                 "group":"12313"
             },{
                 "name":"",
                 "id": "add_300",
                 "is_approve":true,
                 "is_parallel":true,
                 "group":"12313"
             }],
             "active":0,
             "step" : {}
         },
         coumpted:{
            
         },
         methods:{
             add_step:function(index){
                 console.log(index);
                 var id = "add_" + Number.random(1e12);
                 var item = Object.assign({},app.list[index],{id:id,name:""});
                 app.list.splice(index + 1,0,item);
             },
             remove_step:function(index){
                 app.list.splice(index,1);
             },
             active_step:function(item,index){
                 app.active = index;
                 app.step = item;
             },
             get_group:function(group){
                return this.list.filter(function(item){
                    return item.group == group;
                });
             }
             
         }
    })
    $(document).ready(function(){

        //$("#form").my({

        //  Default data
        //  data: ,
        //  Detail:{},
        //   Init function
        //  init: function ($node, runtime) {
        //     this.my.insert("#list", {"name":""});
        //     this.my.insert("#list", {"name":""});
        //  },

        //   Bindings
        //  ui: {
        //    "#code": { bind: "code" },
        //    "#name": { bind: "name" },
        //    "#group_id": { bind: "group_id" },
        //    "#description":{bind:"description"},
        //    "#list":{                                       List control section
        //      bind:"list",
        //      list:'<div class="br2"></div>',
        //      init: function ($control) {
        //         Init plugin
        //        var that = this;
        //        $control.on("switch.my", function (event, item){
        //            that.Detail=item;
        //            return false;
        //        })
        //      },
        //      id: function (e){return e.id},
        //      manifest:"Step",
        //      watch: "#detail",
        //      manifest: function (item, index, list) {     Return manifest for an item
        //        return this.Forms[item.type];
        //      }
        //    },
        //    "#detail":{
        //        bind:"this.Detail",
        //        watch: "#list",
        //        id: function (e){return e.id},
        //        manifest: {
        //            init:  function ($control) {                   Init plugin
        //                var template = $("#template_detail").html();
        //                var rendered = Mustache.render(template);
        //                $control.html([rendered].join(""));
        //            },
        //            ui: {
        //                ".current-step": "name",
        //            }
        //        },
        //        watch: "#list",
        //    }
        //  },
        //  Step:{
        //    data: { name:"user" },
        //    ui:{
        //      ".step_stt":{ bind:"stt" },
        //      ".order-process":{
        //         bind: function (d) {
        //            d.stt = this.my.index()+1;
        //            var parent = this.my.root();
        //            $(".before,.after",parent).hide();
        //            if(d.stt == 1){
        //                $(".before",parent).show();
        //                $(".remove_step",parent).hide();
        //            }
        //            return d.stt;
        //         },
        //         watch: ".step_stt"
        //      },
        //      ".step_name":{
        //          bind: "name",
        //          bind: function (d, v, $o) {
        //            if (null != v) {
        //                d.name = v;
        //                $(".item-step-data").removeClass("active-step");
        //                $(".item-step-data",$o.my().root).addClass("active-step");
        //                this.my.trigger(null, "switch", d);
        //            }
        //            return d.name;
        //          },
        //          events:'focus.my change.my keyup.my'
        //      },

        //      ".remove_step":{
        //        bind: function (data, val) {
        //          if (null != val){
        //              this.my.remove();
        //              check_steps()
        //              $(".tooltip").remove();
        //          }
        //        },
        //        events:"click.my"
        //      },
        //      ".add_step":{
        //        bind: function (data, val) {
        //          if (null != val) {
        //              console.log(data);
        //              var id = Number.random(1e12)+"";
        //              var index = data.stt ? data.stt:0;
        //              console.log(index)
        //              $("#form").my().manifest.my.insert("#list",index,{name:'',id:id});

        //              $(".tooltip").remove();

        //              check_steps()
        //          }
        //        },
        //        events:"click.my"
        //      }
        //    },
        //    init: function ($control) {
        //        var template = $("#template_step").html();
        //        var rendered = Mustache.render(template);
        //        $control.html([rendered].join(""));
        //    }
        //  },
        //})
    })
</script>
}
